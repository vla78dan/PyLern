"""
** Дайте ответы на следующие вопросы **

Дайте краткое описание следующим типам объектов и структурам данных, которые Вы изучили:

Числа (Numbers):
Что это: Простые числовые данные.

Особенности: Бывают целые (int), с плавающей точкой (float) и комплексные (complex).

Аналогия: Как обычные числа в математике.

Пример: 5, -12, 3.14

Строки (Strings):
Что это: Последовательность символов (текст).

Особенности: Неизменяемые. Создаются в кавычках (одинарных, двойных или тройных).

Аналогия: Текст или слово.

Пример: "Привет", '123', '''Многострочный текст'''

Списки (Lists):
то это: Упорядоченные коллекции элементов.

Особенности: Изменяемые (можно добавлять, удалять, менять элементы). Элементы в квадратных скобках [].

Аналогия: Пронумерованный список дел, который можно редактировать.

Пример: [1, "яблоко", 3.14, True]

Кортежи (Tuples):
Что это: Упорядоченные коллекции элементов.

Особенности: Неизменяемые (после создания нельзя изменить). Элементы в круглых скобках ().

Аналогия: Защищенный документ, который нельзя изменить, или координаты точки (x, y).

Пример: (10, 20), ("Москва", "Россия")



Словари (Dictionaries):
Что это: Неупорядоченные коллекции пар ключ: значение.

Особенности: Изменяемые. Доступ к значению осуществляется по ключу (а не по индексу). Элементы в фигурных скобках {}.

Аналогия: Словарь, где слово — это ключ, а определение — значение.

Пример: {"name": "Alice", "age": 30, "city": "Moscow"}


Напишите любое выражение, которое использует умножение, деление, экспоненту, сложение и вычитание - так, чтобы результат получился равным 100.25.

Подсказка: просто вспомните основные арифметические команды, и следуйте обратно от числа 100.25

q = 10 * 5 / 10 + 96 - 0.75
print(q)

Дайте ответы на следующие 3 вопроса, без запуска кода. Затем введите код, чтобы проверить ответ.

Какое значение будет результатом выражения 4 * (6 + 5) -44

Какое значение будет результатом выражения 4 * 6 + 5 - 29

Какое значение будет результатом выражения 4 + 6 * 5 - 34

Какой будет тип у результата выражения 3 + 1.5 + 4? - float

Что Вы будете использовать, чтобы найти квадратный корень числа, а также квадрат числа?

q1 = 2**2 - 4
print(q1)
q2 = 2**0.5 - 1.4142135623730951
print(q2)

Есть строка 'hello'. Введите команду, которая выведет букву 'e'. Введите Ваш код в ячейке ниже:
q = 'hello'
print(q[1])
print(q[::-1])

Используя строку hello, укажите два способа, как можно получить букву 'o' с помощью индексирования.
q = 'hello'
print(q[-1])
print(q[-1:])

Создайте список [0,0,0] двумя разными способами.

list = [0,0,0]
print(list)

my_tuple = (1, 2, 3)
print(list(my_tuple))
my_set = {1, 2, 3}
print(list(my_set))

Переопределите 'hello' в этом сложенном списке, чтобы вместо этого сказать 'goodbye':

list3 = [1,2,[3,4,'hello']]
list3[2][2] = "goodbye"
print(list3)

Используя ключи и индексирование, прочитайте 'hello' из следующих словарей:
d = {'simple_key':'hello'}
print(d['simple_key'])
d1 = {'k1':{'k2':'hello'}}
print(d1['k1']['k2'])


d2 = {'k1':[{'nest_key':['this is deep',['hello']]}]}
# d2['k1'] → список [{'nest_key':...}]#
# d2['k1'][0] → первый элемент списка (словарь) {'nest_key':...}#
# d2['k1'][0]['nest_key'] → список ['this is deep', ['hello']]#
# d2['k1'][0]['nest_key'][1] → второй элемент ['hello']#
# d2['k1'][0]['nest_key'][1][0] → первый элемент вложенного списка 'hello'


print(d2['k1'][0]['nest_key'][1][0])

d3 = {'k1':[1,2,{'k2':['this is tricky',{'tough':[1,2,['hello']]}]}]}
# d3['k1'] → список [1, 2, {'k2':...}]
# d3['k1'][2] → третий элемент списка (словарь) {'k2':...}
# d3['k1'][2]['k2'] → список ['this is tricky', {'tough':...}]
# d3['k1'][2]['k2'][1] → второй элемент списка (словарь) {'tough':...}
# d3['k1'][2]['k2'][1]['tough'] → список [1, 2, ['hello']]
# d3['k1'][2]['k2'][1]['tough'][2] → третий элемент ['hello']
# d3['k1'][2]['k2'][1]['tough'][2][0] → первый элемент 'hello'


print(d3['k1'][2]['k2'][1]['tough'][2][0])

В чем основная разница между кортежами и списками?
Кортеж (tuple) представляет последовательность элементов, которая во многом похожа на список за тем исключением, что кортеж является неизменяемым (immutable) типом. Поэтому мы не можем добавлять или удалять элементы в кортеже, изменять его.
Для создания кортежа используются круглые скобки, в которые помещаются его значения, разделенные запятыми:
tom = ("Tom", 23)
print(tom)     # ("Tom", 23)
Также для определения кортежа мы можем просто перечислить значения через запятую без применения скобок:
tom = "Tom", 23
print(tom)     # ("Tom", 23)
Если вдруг кортеж состоит из одного элемента, то после единственного элемента кортежа необходимо поставить запятую:
tom = ("Tom",)

name = ('Bobb', 'Joe')
print(name)
print(type(name))

В чем основная особенность множеств?
Множество (set) представляют еще один вид набора, который хранит только уникальные элементы. Для определения множества используются фигурные скобки, в которых перечисляются элементы:
users = {"Tom", "Bob", "Alice", "Tom"}
print(users)    # {"Alice", "Bob", "Tom"}

Используйте множество, чтобы найти уникальные значения в списке ниже:

list5 = [1,2,2,33,4,4,11,22,3,3,2]
num = set(list5)
print(num)
l_one = [1,2,[3,4]]
l_two = [1,2,{'k1':4}]



# True или False?
l_one[2][0] >= l_two[2]['k1']
Шаг 1: Разбираем левую часть l_one[2][0]
l_one[2] → [3, 4] (третий элемент списка l_one)
l_one[2][0] → 3 (первый элемент вложенного списка)
Шаг 2: Разбираем правую часть l_two[2]['k1']
l_two[2] → {'k1':4} (третий элемент списка l_two)
l_two[2]['k1'] → 4 (значение по ключу 'k1' в словаре)
Шаг 3: Сравниваем значения
Левая часть: 3
Правая часть: 4
Выражение: 3 >= 4

"""
print(4**0.5 != 2)






































