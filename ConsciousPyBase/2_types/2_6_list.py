"""
Сюжет:
Алон создал уникальную программу для школы, которая позволит в цифровом формате оценивать поведение учеников. С поразительной проницательностью он решил использовать списки для этой задачи. Программа, подобно искусственному интеллекту, обращается к спискам, чтобы безошибочно находить нужных учеников и их оценки.

Задание:
Создайте список rating состоящий из строк: "чудовищно", "не фонтан", "середнячок" , "недурно", "отлично".
Это наши оценки, которыми мы будем пользоваться. Создайте элементы именно в такой последовательности .
Создайте список students с именами учеников: "Dony Jepp", "Mill Buray", "Lorlando Bum". Это список с нашими учениками.
Ваша задача, с помощью f-строки, красиво вывести на экран сообщения о поведении этих учеников.
Сделайте это по шаблону: f"{ученик} вёл себя сегодня {оценка}"
Для этого, используйте информацию ниже:
- Мы знаем, что "Dony Jepp" получил оценку с индексом 0 из списка rating
- Мы знаем, что "Mill Buray" получил оценку с индексом 1 из списка rating
- Мы знаем, что "Lorlando Bum" получил оценку с индексом 3 из списка rating
Пример вывода  можно посмотреть в Sample Output.
Мы же будущие программисты, поэтому в фигурных скобках {} f-строк, используйте обращения к спискам students и rating. Например: print(f"{students[0]} {rating[2]}") выведет Dony Jepp середнячок.
Если кратко: нужно создать переменные: rating и students, и вывести красиво на экран информацию о поведении учеников.
Обратите внимание на букву ё, в слове вёл, чтобы у вас не возникло ошибки.

Dony Jepp вёл себя сегодня чудовищно
Mill Buray вёл себя сегодня не фонтан
Lorlando Bum вёл себя сегодня недурно

rating = ["чудовищно", "не фонтан", "середнячок" , "недурно", "отлично"]
students = ["Dony Jepp", "Mill Buray", "Lorlando Bum"]

print(f"{students[0]} вёл себя сегодня {rating[0]}")
print(f"{students[1]} вёл себя сегодня {rating[1]}")
print(f"{students[2]} вёл себя сегодня {rating[3]}")

Методы списков
Метод append(), изменяет оригинал списка путем добавления одного элемента в конец списка
my_list = [1,2,3]
my_list.append(4)
my_list.append("строка")
my_list.append([5,6,7])
print(my_list) # [1, 2, 3, 4, 'строка', [5, 6, 7]]

Метод extend() добавляет несколько элементов в конец списка

my_list = [1,2,3]
my_list.extend([4,5,6])
print(my_list) # [1, 2, 3, 4, 'строка', [5, 6, 7]]

my_list = [1,2,3]
my_list = my_list.append(4)
print(my_list) # None


Метод .extend(iterable)
Этот метод используется для добавления нескольких элементов в конец списка. Для этого нужно в скобках указать, например список (или другой итерируемый объект, об этом позже).

my_list = [1,2,3]
my_list.extend([4,5,6])
print(my_list)  # [1, 2, 3, 4, 5, 6]

К итерируемым объектам (iterable) относятся списки, строки и другие, пока не известные вам объекты. Поэтому в extend() можно вставить строку, но тогда каждый символ добавится в список как отдельная строка:

my_list = [1,2,3]
my_list.extend("string")
print(my_list) # [1, 2, 3, 's', 't', 'r', 'i', 'n', 'g']

Метод .insert(index, object)
Этот метод используется для добавления одного элемента в список по указанному индексу. Метод возвращает None. Метод принимает два аргумента:
index: указываем число, означающее индекс, то есть место, куда нужно вставить элемент.
object: объект, который вы планируете вставить в список.
my_list = [1,2,3]
my_list.insert(0, "string")
print(my_list) # ['string', 1, 2, 3]

.remove(value)
Метод .remove() используется для удаления первого совпадения указанного элемента из списка. Принимает один обязательный аргумент (value) – объект, который нужно удалить. Изменяет исходный список, удаляя первое совпадение указанного элемента, смещая оставшиеся элементы списка. Если указанный элемент не найден в списке, возникнет ошибка ValueError. Метод возвращает None.
Метод .remove() ищет совпадающий элемент в списке (слева-направо) и удаляет его, после чего поиск останавливается. В списке у нас было два числа 3, удалилось только первое число 3.
my_list = [1,2,3]
my_list.remove(3)
print(my_list) # [1, 2]


.pop(index)
Метод .pop() используется для удаления элемента из списка по указанному индексу. Если указать индекс, то метод .pop() удалит элемент с этим индексом. Если элемента с этим индексом нет, то возникнет ошибка IndexError.
my_list = [1,2,3,4,5]
my_list.pop(2)
print(my_list) # [1, 2, 4, 5]
Обратите внимание, вызывая метод .pop() мы попросили удалить элемент с индексом 2, а не число 2 в списке, поэтому удалилось число 3.

В методе .pop() можно не указывать индекс, тогда метод удалит последний элемент списка. Но если список был пустой, то возникнет ошибка (исключение IndexError).

Метод .pop() интересен тем, что он не только удаляет элемент, но и возвращает то, что удалил. Это значит, что мы можем присвоить операцию с .pop() в переменную, и в неё сохранится тот элемент, который мы удалили. Поэтому, говорится что .pop() удаляет и возвращает элемент по индексу или последний элемент (если не указывать индекс).
list1 = [1,2,3,4,5,6,7,8]
del_element = list1.pop()
print(del_element)# 8
print(list1)# [1, 2, 3, 4, 5, 6, 7]


Создайте переменную student и присвойте пустой список []. В списке будут располагаться оценки ученика.
Добавьте в список student число 5.
Добавьте в список ещё три числа: 2, 3, 4. Эти новые числа стоят после числа 5 в списке student.
Оказалось, что оценка 2 была поставлена ошибочно, и её нужно исправить на 1. То есть число 1 будет стоять в том же месте, где стояло число 2.
Оценки 3 и 4 были также поставлены ошибочно, их нужно только удалить из списка.
Внесите все исправления и выведите на экран получившийся список оценок student.
Используйте для решения задачи любые методы списков, для добавления и удаления элементов.
student = []
student.append(5)
student.extend([2,3,4])
student.insert(1, 1)
del student[2:]
print(student)

Метод .index()
Метод .index() используется для поиска элемента в списке. Он возвращает индекс первого совпадения элемента, который вы указали. Однако, если элемент не найден, возникает ошибка ValueError.


Уже создан список result, который состоит из имени, названия предмета и оценок по этому предмету. Например:
["Дони Джеп", "География", 5, 5, 4, 4, 3, 3, 2]
Создайте красивый отчёт по следующей схеме и выведите его на экран:
Имя: Дони Джеп
Предмет: География
Количество 1: 0
Количество 2: 1
Количество 3: 2
Количество 4: 2
Количество 5: 2
Обратите внимание, что вам нужно посчитать количество уникальных оценок. Например, Количество 5: 2 означает, что пятёрок 2 штуки. Имя, предмет и оценки в списке result могут быть разными (см. тесты). Но гарантируется, что первый элемент – это всегда имя, второй – предмет, а третий и далее – оценки. Оценки и их количество может быть разным, учтите это в своём коде.​​​​​​
Комментарий: Будьте внимательны к пробелам, каждый пробел должен соответствовать схеме. Каждое слово в задании начинается с большой буквы, если сделать с маленькой – тест не пройдёт.
Тесты
Sample Input:
result = ["Дони Джеп", "География", 5, 4, 3, 2, 4, 1, 3, 4, 5, 4, 3, 4, 5]
Sample Output:
Имя: Дони Джеп
Предмет: География
Количество 1: 1
Количество 2: 1
Количество 3: 3
Количество 4: 5
Количество 5: 3

result = ["Дони Джеп", "География", 5, 5, 4, 4, 3, 3, 2]
name = result[0]
sub = result[1]
res1 = result.count(1)
res2 = result.count(2)
res3 = result.count(3)
res4 = result.count(4)
res5 = result.count(5)
print(
    f"Имя: {name}",
    f"Предмет: {sub}",
    f"Количество 1: {res1}",
    f"Количество 2: {res2}",
    f"Количество 3: {res3}",
    f"Количество 4: {res4}",
    f"Количество 5: {res5}",sep="\n"
)

Пользователь вводит на одной строке несколько фамилий и имён, как в примере выше, разделённые одним пробелом. Примите эту строку и присвойте её в переменную students.
Преобразуйте строку students в список, состоящий из фамилий и имён. Вариант готового списка смотрите в Sample Output.
Выведите на экран список students.
Sample Input 1:

Евгений_Онегин Алексей_Вронский Пётр_Безухов Аркадий_Кириллович_Лебедев
Sample Output 1:

['Евгений_Онегин', 'Алексей_Вронский', 'Пётр_Безухов', 'Аркадий_Кириллович_Лебедев']
Sample Input 2:

Иван_Ильич Раскольников_Родион Дмитрий_Фёдорович_Карамазов
Sample Output 2:

['Иван_Ильич', 'Раскольников_Родион', 'Дмитрий_Фёдорович_Карамазов']
Sample Input 3:

Андрей_Болконский Наташа_Ростова Анна_Павловна_Шерер
Sample Output 3:

['Андрей_Болконский', 'Наташа_Ростова', 'Анна_Павловна_Шерер']

students = input()
print(students.split())

Задание:
Уже созданы три переменные: dony_jepp, mill_burey, lorlando_bum. Они являются списками, и состоят из оценок ученика. Например, dony_jepp имеет оценки [2, 4, 3, 5, 5].
Создайте переменную all_list, которая будет являться списком, состоящим из всех оценок учеников (dony_jepp, mill_burey, lorlando_bum). Например, если у нас три ученика (a, b, c) и у каждого из них свой список оценок:
 a = [1, 1], b = [2, 2], c = [3, 3], то all_list = [1, 1, 2, 2, 3, 3].
Отсортируйте список all_list по возрастанию и выведите на экран.
Отсортируйте список all_list по убыванию и выведите на экран.
В итоге на экране появится два отсортированных списка на разных строках, по возрастанию и убыванию соответственно.
dony_jepp = [5, 3, 5, 2, 4, 1, 5, 3, 2, 4, 2, 5, 2]
mill_burey = [1, 5, 2, 3, 4, 3, 2, 5, 2]
lorlando_bum = [5, 2, 5, 5, 5, 5, 5]
all_list = dony_jepp + mill_burey + lorlando_bum
all_list.sort()
print(all_list)
all_list.sort(reverse=True)
print(all_list)

Задание:
Создайте переменную student и присвойте пустой список.
Добавьте в список student, ещё три списка: ["Политология"], ["Физкультура"], ["География"]. Теперь наш список является вложенным, на подобии: [[], [], []], только с элементами внутри подсписков.
Когда учителя ставят оценки, они добавляются в наши подсписки согласно названию предмета. Добавьте сразу несколько оценок в наши подсписки:
- В политологию добавьте: 5, 5, 5
- В физкультуру добавьте: 3, 3, 3
- В географию добавьте: 4, 4, 4
Теперь наш список выглядит примерно так: [["Политология", 5, 5, 5],...]
Выведите на экран получившийся список student

student = []
student.append(["Политология"])
student.append( ["Физкультура"])
student.append( ["География"])
student[0].extend([5, 5, 5])
student[1].extend([3, 3, 3])
student[2].extend([4, 4, 4])
print(student)


Уже создана переменная present, она является списком из 10 элементов (подарков).
Создайте переменные p1, p2, p3, p4, p5 и с помощью распаковки реализуйте программу Алона.
- В переменную p1, p2, p3 будут присвоен 1, 2, 3 элементы списка present.
- В переменную p5 будет присвоен последний элемент списка present.
- В переменную p4 будет присвоен список из оставшихся элементов списка present. Обратите внимание, именно список.
Выведите на экран переменные p1, p2, p3, p4, p5 на одной строке с помощью команды print()
Переменные p1, p2, p3, p4, p5 - это наши участники конкурса.

Sample Input 1:

present = ['Книга', 'Часы', 'Кофе', 'Шарф', 'Букет', 'Игрушка', 'Сумка', 'Пазл', 'Рамка', 'Плед']
Sample Output 1:

Книга Часы Кофе ['Шарф', 'Букет', 'Игрушка', 'Сумка', 'Пазл', 'Рамка'] Плед

present = ['Книга', 'Часы', 'Кофе', 'Шарф', 'Букет', 'Игрушка', 'Сумка', 'Пазл', 'Рамка', 'Плед']
p1, p2, p3, *p4, p5 = present
print(p1, p2, p3, p4, p5)



"""




































































































