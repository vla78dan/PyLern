"""
q = ["Moscow", "Tver", "Vologda"]
print(q)
marks = [2, 3, 4, 3, 5, 2]
print(marks[0])
# средний балл
marks_midlle = (marks[0] + marks[1] + marks[2] + marks[3] + marks[4] + marks[5]) / 6
print(marks_midlle)
marks_last = marks[-1] # 2
print(marks_last) # 4-21

print(marks_midlle)


lst2 = [1, 2.5, [-1, -2, -3], 4]
print(lst2)

q = list("python") # ['p', 'y', 't', 'h', 'o', 'n']
print(q)

marks = [2, 3, 4, 3, 5, 2]
marks[1] = "удовлетворительно"
print(marks) # [2, 'удовлетворительно', 4, 3, 5, 2]
print(len(marks)) # 6



t = [23.5, 25.6, 27.3, 26.0, 30.4, 29.5]
print(t) # [23.5, 25.6, 27.3, 26.0, 30.4, 29.5]
print(min(t))  # 23.5
print(max(t))  # 30.4
print(sum(t))  # 162.3 summa
print(sum(t)/len(t))  # 27.05 среднее значение

# функция sorted, если ее вызвать с одним аргументом:
# sorted(t)
# то она возвратит новый список с отсортированными значениями по неубыванию (или, как часто говорят, по возрастанию). И, обратите внимание, эта функция не меняет прежний список t, она именно возвращает новый список с отсортированными значениями. Очевидно, чтобы сохранить результат работы этой функции, следует использовать переменную, например, так:

t1 = sorted(t) # [23.5, 25.6, 26.0, 27.3, 29.5, 30.4] возвращает новый список, отсортированный по возрастанию
t2 = sorted(t, reverse=True) # [30.4, 29.5, 27.3, 26.0, 25.6, 23.5] возвращает новый список, отсортированный по убыванию.

s = list("python") # ['p', 'y', 't', 'h', 'o', 'n']
q = sorted(s)
print(max(s)) # y
print(min(s)) # h
print(q) # ['h', 'n', 'o', 'p', 't', 'y']

l1 = [1, 2, 3]
l2 = [4, 5]
l3 = l1 + l2  # [1, 2, 3, 4, 5]
l4 = ["i", "love", "python"]  # ['i', 'love', 'python']

l5 = l4 * 2  # ['i', 'love', 'python', 'i', 'love', 'python']
print(l5)
l7 = ["i"] + ["love"] + ["python"]  # ['i', 'love', 'python']
l8 = ["i"] + ["love"] * 3 + ["python"]  # ['i', 'love', 'love', 'love', 'python']

lst = ["Москва", 1320, 5.8, True, "Тверь", False] # ['Москва', 1320, 5.8, True, 'Тверь', False]
l2 = 1320 in lst # True
l2 = 132 in lst # False

lst = ["Москва", 1320, 5.8, True, "Тверь", False, [1, 2]] # ['Москва', 1320, 5.8, True, 'Тверь', False, [1, 2]]
l3 = [1, 2] in lst # True


lst = ["Москва", 1320, 5.8, True, "Тверь", False, [1, 2]] # ["Москва", 1320, 5.8, True, "Тверь", False, [1, 2]]
del lst[2] # ['Москва', 1320, True, 'Тверь', False, [1, 2]]


print(lst)

На вход программе подаются три целых числа, записанных в одну строку через пробел. Необходимо прочитать эти числа и сформировать список lst, хранящий прочитанные значения в порядке их чтения. Результат (список) выведите на экран, используя команду:

q, w, e = map(int, input().split())
lst = [q, w, e]
print(lst)



 На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Необходимо прочитать эту строку и на ее основе сформировать список с помощью следующей команды:
cities = input().split()
Затем, необходимо проверить, присутствует ли в этом списке город "Москва". Вывести на экран True, если присутствует и False - в противном случае. Решить эту задачу следует без использования условного оператора.
cities = input().split()
print("Москва" in cities)



На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Прочитайте эту строку и на ее основе сформируйте список с помощью следующей команды:
cities = input().split()
Выведите значение последнего элемента списка cities на экран.
Sample Input:
Москва Питер Уфа Казань Владимир
Sample Output:
Владимир
cities = input().split()
print(cities[-1])



На вход программе подаются оценки студента (целые числа от 2 до 5), записанные в одну строчку через пробел. Все эти оценки читаются и сохраняются в список с помощью следующей команды (прописать в программе):
marks = list(map(int, input().split()))
Необходимо вычислить средний балл списка marks и вывести его на экран с точностью до десятых (один знак после запятой).
marks = list(map(int, input().split()))
mid = sum(marks) / len(marks)
print(mid)
mid1 = round(mid, 1)
print(mid1)

На вход программе подаются следующие данные по книге (каждое значение с новой строки):
название (строка);
автор (строка);
число страниц (целое число);
цена (вещественное число).
Необходимо прочитать эти данные и сохранить в списке book в порядке их чтения. Затем, из этого списка удалить 3-й элемент (число страниц), в качестве автора записать "Пушкин", а цену увеличить в 2 раза. Результат (список book) вывести на экран командой:
print(book)
Sample Input:
Мастер и Маргарита
Булгаков
233
435.45
Sample Output:
['Мастер и Маргарита', 'Пушкин', 870.9]
name = input().strip()
auth = input().strip()
page = int(input())
price = float(input())
book = [name, auth, page, price * 2]
del book[2]
book [1] = "Пушкин"
print(book)



На вход программе подается строка с количеством новых подписчиков канала по дням, записанных в одну строку через пробел. Необходимо прочитать эти числа и сохранить в списке, как целые числа в порядке их следования в строке. Затем, вывести через пробел на экран максимальное, минимальное и суммарное значения этого списка.
52 65 64 54 68 59 42 63
Sample Output:
68 42 467
lst = list(map(int, input().split()))
print(max(lst), min(lst), sum(lst))



На вход программе подается строка с количеством новых подписчиков канала по дням, записанных в одну строку через пробел. Необходимо прочитать эти числа и сохранить в списке lst, как целые числа в порядке их следования в строке. Затем, отсортировать элементы этого списка по убыванию и результат вывести на экран командой:
print(*lst)
52 65 64 54 68 59 42 63
Sample Output:
68 65 64 63 59 54 52 42
lst = list(map(int, input().split()))
lst = sorted(lst, reverse=True)
print(*lst)


На вход программе подается строка, содержащая названия городов, записанных через пробел. Необходимо прочитать эту строку и на ее основе создать список lst из названий городов, добавив в его начало список cities:
cities = ["Москва", "Тверь", "Вологда"]
Выведите полученный список lst на экран командой:
print(*lst)
lst = list(input().split())
cities = ["Москва", "Тверь", "Вологда"]
lst = cities + lst
print(*lst)

На вход программе подается строка, содержащая названия городов, записанных через пробел. Необходимо прочитать эту строку и на ее основе сформировать список lst из названий городов, добавив в его конец список cities:
cities = ["Москва", "Тверь", "Вологда"]
 Выведите полученный список lst на экран командой:
print(*lst)
Sample Input:
Уфа Казань Севастополь
Sample Output:
Уфа Казань Севастополь Москва Тверь Вологда

lst = list(input().split())
cities = ["Москва", "Тверь", "Вологда"]
lst = lst + cities
print(*lst)

"""


lst = list(input().split())
cities = ["Москва", "Тверь", "Вологда"]
lst = lst + cities
print(*lst)







