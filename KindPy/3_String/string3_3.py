"""q = "python"
res = q.upper() # PYTHON переводит в верхний регистр
a = "PYThon"
res = q.lower() # python переводит в нижний регистр

String.count(sub[, start[, end]])
возвращает число повторений подстроки sub в строке String. Два необязательных аргумента:
start – индекс, с которого начинается поиск;
end – индекс, которым заканчивается поиск.
msg = 'abracadabra'
res = msg.count('ra') # 2 - раза подстрока встречается в строке
res = msg.count('ra', 4) # 1 - раз подстрока встречается в строке c индекса 4

String.find(sub[, start[, end]])
возвращает индекс первого найденного вхождения подстроки sub в строке String.
msg = 'abracadabra'
res = msg.find('ra') # 2 возвращает индекс первого вхождения, если метод не находит подстроку - возвращает -1 направление поиска слева-направо
r.find() - направление поиска справа налево


String.index(sub[, start[, end]])
Он работает абсолютно также как find, но с одним отличием: если указанная подстрока sub не находится в строке String, то метод приводит к ошибке - такие ошибки обрабатывают, как исключения


String.replace(old, new, count=-1)
Выполняет замену подстрок old на строку new и возвращает измененную строку. Например, в нашей строке, мы можем заменить все буквы a на o:
msg = 'abracadabra'
res = msg.replace('a', 'Y') # YbrYcYdYbrY
res = msg.replace('a', ' ') #  br c d br можем удалять подстроки

String.isalpha()
возвращает True, если строка целиком состоит из букв и False в противном случае. Посмотрим, как он работает:
msg = 'abracadabra'
msg1 = 'abracadabra1'
res = msg.isalpha() # True
res = msg1.isalpha() # False

String.isdigit()
возвращает True, если строка целиком состоит из цифр и False в противном случае

Подвиг 2. На вход программе подается слово в виде строки. Необходимо прочитать это слово и его первую букву сделать заглавной, а остальные - малыми. Результат отобразить на экране.
q = input().strip()
res = q.capitalize()
print(res)

На вход программе подается строка. Необходимо прочитать эту строку и определить число вхождений дефисов (-) в ней. На экране отобразить полученное число.
q = input().strip()
res = q.count('-')
print(res)

На вход программе подается строка. Прочитайте эту строку и с помощью метода String.find найдите в ней индекс первого вхождения фрагмента "ra". Полученное число (индекс) выведите на экран.
q = input().strip()
res = q.find('ra')
print(res)

На вход программе подается строка (слаг). Прочитайте ее и замените в ней все двойные дефисы (--) и тройные (---) на одинарные (-). Подумайте, в какой последовательности следует выполнять эти замены. Результат преобразования выведите на экран.
q = input().strip()
res = q.replace('---', '-')
res1 = res.replace('--', '-')
print(res1)

DEEP^
q = input().strip()
result = q.replace('---', '-').replace('--', '-')
print(result)

На вход программе подаются три целых положительных числа (максимум трехзначные), записанные в одну строчку через пробел. Необходимо их прочитать из входного потока. Затем, для двухзначных и однозначных чисел добавить слева незначащие нули так, чтобы все числа содержали по три цифры. Вывести на экран полученные числа в столбик (каждое с новой строки) в порядке их чтения из входного потока.

q, w, e = input().split()
q1, w1, e1 = q.rjust(3, '0'), w.rjust(3, '0'), e.rjust(3, '0')

print(q1, w1, e1, sep='\n')


На вход программе подается строка, состоящая из слов, разделенных пробелом. Необходимо прочитать строку и подсчитать число слов в ней. Результат (число слов) отобразить на экране.
q= input()
res = q.split()
print(len(res))



На вход программе подается строка, состоящая из названий городов, разделенных пробелом. Необходимо прочитать эту строку и преобразовать так, чтобы названия городов шли через точку с запятой (без пробелов). Результат  (строку) отобразите на экране.
На вход программе подается строка, состоящая из названий городов, разделенных пробелом. Необходимо прочитать эту строку и преобразовать так, чтобы названия городов шли через точку с запятой (без пробелов). Результат  (строку) отобразите на экране.

"""
q = input().strip()

print(q.replace(' ', ';'))

