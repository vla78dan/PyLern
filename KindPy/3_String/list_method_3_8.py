

lst = [1, -54, 3, 23, 43, 45, 0]
# lst.append(100) # [1, -54, 3, 23, 43, 45, 0, 100] - добавляет элемент в список - метод append меняет сам список
# lst.insert(0, 100) # [100, 1, -54, 3, 23, 43, 45, 0] - позволяет вставлять в списо значения по индесу
# lst.remove(-54) # [1, 3, 23, 43, 45, 0] - позволяет удалять элемент по значению, если происходит удаление несуществующего значения метод приводит к ошибке
# lst_end = lst.pop() # 0 - если метод рор записываем без аргумента, происходит удаление последнего элемента в списке, при этом он возвращает удаленный элемент
# lst_arg = lst.pop(1)  # print(lst)- [1, 3, 23, 43, 45], print(lst_arg) - (-54) если метод рор записываем с  аргуменвом происходит удаление элемента в списке согласно аргументу
# lst.clear()# [] - очистка списка
# lst_copy = lst.copy() # - копирует список, создает другой список с такими же значениями, ID будут разные, аналоги записи - срезы lst_copy2 = lst[:], lst_copy3= list(lst)
lst2 = [1, -54, 0, 3, 23, 43, 0, 45, 0]

# lst_count = lst2.count(0) # 3 - позволяет находить количество значений 0 в списке lst2
# lst2_index = lst2.index(1) # 0 - возвращает индекс первого найденного значения
# lst2_index1 = lst2.index(0, 6) # 6 - возвращает индекс найденного значения? вторая цифра означает с какого шага будем искать
# lst2.reverse() # print(lst2) - [0, 45, 0, 43, 23, 3, 0, -54, 1] меняет порядок следования элементов на обратный
# lst2.sort() #print(lst2)- [-54, 0, 0, 0, 1, 3, 23, 43, 45] сортировка значений по возрастанию текущего списка
# lst2.sort(reverse=True) #print(lst2)- [45, 43, 23, 3, 1, 0, 0, 0, -54] сортировка значений по убыванию текущего списка


# cities = ["Москва", "Казань", "Ярославль"]
# cities.insert(1, "Ульяновск")
# print(*cities) # Москва Ульяновск Казань Ярославль
"""
Подвиг 4. На вход программы подается строка с номером телефона в формате: 

+7(xxx)xxx-xx-xx

Необходимо прочитать эту строку и преобразовать ее в список lst (посимвольно, то есть, элементами списка будут являться отдельные символы строки). Затем, удалить первый '+', число 7 заменить на 8 и убрать дефисы.

lst = list(input()) # Ввдо с клавиатуры : +7(912)123-45-67
# print(lst) - ['+', '7', '(', '9', '1', '2', ')', '1', '2', '3', '-', '4', '5', '-', '6', '7']
lst.remove('+')
lst.remove('-')
lst.remove('-')
lst.pop(0)
lst.insert(0, '8')

print("".join(lst))
"""
"""
На вход программы подается строка с именем, отчеством и фамилией, записанными через пробел. Необходимо прочитать эту строку и представить прочитанные данные в виде новой строки в формате:

Фамилия И.О.

Например, строка: "Сергей Михайлович Балакирев" преобразуется в строку: "Балакирев С.М."


i, o, f = input().split()
print(f, i, o)
i_cut = i[0]
o_cut = o[0]

print(f"{f} {i_cut}.{o_cut}.")
"""


"""
На вход программы подаются целые числа, записанные в одну строку через пробел (не менее четырех). Необходимо прочитать эти числа и среди них найти три наименьших числа. Выведите на экран найденные три числа в порядке возрастания в одну строчку через пробел. 

8 11 -5 10 -1 0 7

Sample Output:
-5 -1 0


st = list(map(int, input().split()))
st.sort()
print(*st[0:3])
"""
"""
На вход программы подаются целые числа, записанные в одну строку через пробел. Необходимо прочитать эти числа и сохранить их в списке lst. Удалите последнее значение из списка lst и если оно нечетное, то в список (в конец) добавьте булево значение True, а иначе False. Отобразите полученный список на экране командой: print(*lst)

Sample Input:
8 11 0 3 5 6

Sample Output:
8 11 0 3 5 False


lst = list(map(int, input().split()))
lst_pop = lst.pop()
lst2 = (lst_pop % 2 != 0)
lst.append(lst2)
print(*lst)

На вход программы подаются оценки студента (числа от 2 до 5), записанные в одну строку через пробел. Необходимо прочитать эти числа и сохранить их в списке. Определите количество двоек в сформированном списке и выведите это значение на экран.

2 3 5 2 4 2 2 5

Sample Output:
4

marks1 = list(map(int, input().split()))
m = marks1.count(2)
print(m)

На вход программы подается строка с названиями рек, записанными в одну строчку через пробел. Необходимо прочитать строку и сформировать список lst из названий рек. Затем, отсортировать по возрастанию полученный список по названиям и в отсортированном списке удалить первый элемент. Результирующий список отобразить на экране в одну строчку через пробел с помощью команды:

Лена Обь Волга Дон Енисей

Дон Енисей Лена Обь


lst1 = list( input().split())
lst1.sort()
lst = lst1.pop(0)

print(*lst1)

В данном случае и lst = input().split() и lst = list(input().split()) приводят практически к одинаковому результату - списку строк. Однако есть небольшое, но важное различие в производительности и потреблении памяти.

⦁ lst = input().split() немного эффективнее, потому что input().split() уже возвращает список. Вызов list() в lst = list(input().split()) создает новый список, копируя элементы из уже существующего списка. Это дополнительное копирование требует немного больше времени и памяти, хотя для небольших списков это практически незаметно.

⦁ lst = list(input().split()) создаёт явную копию списка. Это может быть важно в некоторых случаях, когда вы не хотите изменять исходный список, возвращаемый input().split(). Если вы планируете изменять lst (как в вашем примере с сортировкой и удалением), явное копирование может предотвратить непреднамеренные побочные эффекты.

В большинстве случаев, включая ваш пример, lst = input().split() предпочтительнее из-за лучшей производительности. Явное преобразование в список с помощью list() редко необходимо, если вы не работаете с очень специфическими случаями, где требуется гарантированная копия.

Таким образом, для решения задач подобных "Подвигу 10", lst = input().split() является оптимальным выбором.


"""


































